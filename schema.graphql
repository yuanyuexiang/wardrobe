input big_int_filter_operators {
  _eq: GraphQLBigInt
  _neq: GraphQLBigInt
  _in: [GraphQLBigInt]
  _nin: [GraphQLBigInt]
  _gt: GraphQLBigInt
  _gte: GraphQLBigInt
  _lt: GraphQLBigInt
  _lte: GraphQLBigInt
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLBigInt]
  _nbetween: [GraphQLBigInt]
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _null: Boolean
  _nnull: Boolean
}

type boutiques {
  id: ID!
  name: String
  status: String
  images: JSON
  images_func: count_functions
  main_image: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  stars: Int
  address: String
  city: String
  code: String
  category: String
  contact: String
  expire_date: Date
  expire_date_func: datetime_functions
}

type boutiques_aggregated {
  group: JSON
  countAll: Int
  count: boutiques_aggregated_count
  countDistinct: boutiques_aggregated_count
  avg: boutiques_aggregated_fields
  sum: boutiques_aggregated_fields
  avgDistinct: boutiques_aggregated_fields
  sumDistinct: boutiques_aggregated_fields
  min: boutiques_aggregated_fields
  max: boutiques_aggregated_fields
}

type boutiques_aggregated_count {
  id: Int
  name: Int
  status: Int
  images: Int
  main_image: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  stars: Int
  address: Int
  city: Int
  code: Int
  category: Int
  contact: Int
  expire_date: Int
}

type boutiques_aggregated_fields {
  id: Float
  sort: Float
  stars: Float
}

input boutiques_filter {
  id: number_filter_operators
  name: string_filter_operators
  status: string_filter_operators
  images: string_filter_operators
  images_func: count_function_filter_operators
  main_image: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  stars: number_filter_operators
  address: string_filter_operators
  city: string_filter_operators
  code: string_filter_operators
  category: string_filter_operators
  contact: string_filter_operators
  expire_date: date_filter_operators
  expire_date_func: datetime_function_filter_operators
  _and: [boutiques_filter]
  _or: [boutiques_filter]
}

type boutiques_mutated {
  key: ID!
  event: EventEnum
  data: boutiques
}

type categories {
  id: ID!
  name: String!
  description: String
  boutique_id(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): boutiques
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  boutique(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): boutiques
}

type categories_aggregated {
  group: JSON
  countAll: Int
  count: categories_aggregated_count
  countDistinct: categories_aggregated_count
  avg: categories_aggregated_fields
  sum: categories_aggregated_fields
  avgDistinct: categories_aggregated_fields
  sumDistinct: categories_aggregated_fields
  min: categories_aggregated_fields
  max: categories_aggregated_fields
}

type categories_aggregated_count {
  id: Int
  name: Int
  description: Int
  boutique_id: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
}

type categories_aggregated_fields {
  id: Float
  boutique_id: Float
}

input categories_filter {
  id: number_filter_operators
  name: string_filter_operators
  description: string_filter_operators
  boutique_id: boutiques_filter
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  _and: [categories_filter]
  _or: [categories_filter]
  boutique: boutiques_filter
}

type categories_mutated {
  key: ID!
  event: EventEnum
  data: categories
}

input count_function_filter_operators {
  count: number_filter_operators
}

type count_functions {
  count: Int
}

input create_boutiques_input {
  id: ID
  name: String
  status: String
  images: JSON
  main_image: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  stars: Int
  address: String
  city: String
  code: String
  category: String
  contact: String
  expire_date: Date
}

input create_categories_input {
  id: ID
  name: String!
  description: String
  boutique_id: create_boutiques_input
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  boutique: create_boutiques_input
}

input create_customers_input {
  id: ID
  open_id: String!
  status: String
  sort: Int
  avatar: String
  type: String
  sex: Int
  nick_name: String
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  boutique: create_boutiques_input
}

input create_directus_access_input {
  id: ID
  role: create_directus_roles_input
  user: create_directus_users_input
  policy: create_directus_policies_input
  sort: Int
}

input create_directus_files_input {
  id: ID
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder: create_directus_folders_input
  uploaded_by: create_directus_users_input
  created_on: Date
  modified_by: create_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date
}

input create_directus_folders_input {
  id: ID
  name: String!
  parent: create_directus_folders_input
}

input create_directus_permissions_input {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: create_directus_policies_input
}

input create_directus_policies_input {
  id: ID
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions: [create_directus_permissions_input]
  users: [create_directus_access_input]
  roles: [create_directus_access_input]
}

input create_directus_roles_input {
  id: ID
  name: String!
  icon: String
  description: String
  parent: create_directus_roles_input
  children: [create_directus_roles_input]
  policies: [create_directus_access_input]
  users: [create_directus_users_input]
}

input create_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: create_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: create_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  text_direction: String
  policies: [create_directus_access_input]
}

input create_orders_input {
  id: ID
  total_price: Float
  status: String
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  product: create_products_input
  customer: create_customers_input
  boutique: create_boutiques_input
}

input create_products_input {
  id: ID
  name: String!
  subtitle: String
  description: String
  price: Float!
  market_price: Float
  stock: Int
  barcode: String
  brand: String
  category_id: create_categories_input
  seller_id: Int
  main_image: String
  images: JSON
  video_url: String
  is_on_sale: Boolean
  status: String
  total_sales_volume: Int
  rating_avg: Float
  total_reviews: Int
  created_at: Date
  updated_at: Date
  boutique_id: create_boutiques_input
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  carousel: String
  boutique: create_boutiques_input
}

input create_terminals_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  android_id: String
  brand: String
  manufacturer: String
  model_name: String
  os_name: String
  os_version: String
  device_name: String
  device_type: String
  total_memory: String
  supported_cpu_architectures: String
  authorized_boutique: create_boutiques_input
}

input create_views_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  customer: create_customers_input
  product: create_products_input
  boutique: create_boutiques_input
}

input create_visits_input {
  id: ID
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  customer: create_customers_input
  boutique: create_boutiques_input
}

type customers {
  id: ID!
  open_id: String!
  status: String
  sort: Int
  avatar: String
  type: String
  sex: Int
  nick_name: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  boutique(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): boutiques
}

type customers_aggregated {
  group: JSON
  countAll: Int
  count: customers_aggregated_count
  countDistinct: customers_aggregated_count
  avg: customers_aggregated_fields
  sum: customers_aggregated_fields
  avgDistinct: customers_aggregated_fields
  sumDistinct: customers_aggregated_fields
  min: customers_aggregated_fields
  max: customers_aggregated_fields
}

type customers_aggregated_count {
  id: Int
  open_id: Int
  status: Int
  sort: Int
  avatar: Int
  type: Int
  sex: Int
  nick_name: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  boutique: Int
}

type customers_aggregated_fields {
  id: Float
  sort: Float
  sex: Float
  boutique: Float
}

input customers_filter {
  id: number_filter_operators
  open_id: string_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  avatar: string_filter_operators
  type: string_filter_operators
  sex: number_filter_operators
  nick_name: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  boutique: boutiques_filter
  _and: [customers_filter]
  _or: [customers_filter]
}

type customers_mutated {
  key: ID!
  event: EventEnum
  data: customers
}

"""ISO8601 Date values"""
scalar Date

input date_filter_operators {
  _eq: String
  _neq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _null: Boolean
  _nnull: Boolean
  _in: [String]
  _nin: [String]
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input datetime_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

type datetime_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
  hour: Int
  minute: Int
  second: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

type directus_access {
  id: ID!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
  sort: Int
}

input directus_access_filter {
  id: id_filter_operators
  role: directus_roles_filter
  user: directus_users_filter
  policy: directus_policies_filter
  sort: number_filter_operators
  _and: [directus_access_filter]
  _or: [directus_access_filter]
}

type directus_access_mutated {
  key: ID!
  event: EventEnum
  data: directus_access
}

input directus_access_quantifier_filter {
  id: id_filter_operators
  role: directus_roles_filter
  user: directus_users_filter
  policy: directus_policies_filter
  sort: number_filter_operators
  _and: [directus_access_filter]
  _or: [directus_access_filter]
  _some: directus_access_filter
  _none: directus_access_filter
}

type directus_activity {
  id: ID!
  action: String!
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  timestamp: Date
  timestamp_func: datetime_functions
  ip: String
  user_agent: String
  collection: String!
  item: String!
  origin: String
  revisions(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_revisions]
  revisions_func: count_functions
}

input directus_activity_filter {
  id: number_filter_operators
  action: string_filter_operators
  user: directus_users_filter
  timestamp: date_filter_operators
  timestamp_func: datetime_function_filter_operators
  ip: string_filter_operators
  user_agent: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  origin: string_filter_operators
  revisions: directus_revisions_quantifier_filter
  revisions_func: count_function_filter_operators
  _and: [directus_activity_filter]
  _or: [directus_activity_filter]
}

type directus_activity_mutated {
  key: ID!
  event: EventEnum
  data: directus_activity
}

type directus_comments {
  id: ID!
  collection: String!
  item: String!
  comment: String!
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_comments_mutated {
  key: ID!
  event: EventEnum
  data: directus_comments
}

type directus_dashboards {
  id: ID!
  name: String!
  icon: String
  note: String
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  color: String
  panels(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_panels]
  panels_func: count_functions
}

input directus_dashboards_filter {
  id: id_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  note: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  color: string_filter_operators
  panels: directus_panels_quantifier_filter
  panels_func: count_function_filter_operators
  _and: [directus_dashboards_filter]
  _or: [directus_dashboards_filter]
}

type directus_dashboards_mutated {
  key: ID!
  event: EventEnum
  data: directus_dashboards
}

type directus_files {
  id: ID!
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  uploaded_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  created_on: Date
  created_on_func: datetime_functions
  modified_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  modified_on: Date
  modified_on_func: datetime_functions
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  tags_func: count_functions
  metadata: JSON
  metadata_func: count_functions
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  tus_data_func: count_functions
  uploaded_on: Date
  uploaded_on_func: datetime_functions
}

input directus_files_filter {
  id: id_filter_operators
  storage: string_filter_operators
  filename_disk: string_filter_operators
  filename_download: string_filter_operators
  title: string_filter_operators
  type: string_filter_operators
  folder: directus_folders_filter
  uploaded_by: directus_users_filter
  created_on: date_filter_operators
  created_on_func: datetime_function_filter_operators
  modified_by: directus_users_filter
  modified_on: date_filter_operators
  modified_on_func: datetime_function_filter_operators
  charset: string_filter_operators
  filesize: big_int_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  duration: number_filter_operators
  embed: string_filter_operators
  description: string_filter_operators
  location: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  metadata: string_filter_operators
  metadata_func: count_function_filter_operators
  focal_point_x: number_filter_operators
  focal_point_y: number_filter_operators
  tus_id: string_filter_operators
  tus_data: string_filter_operators
  tus_data_func: count_function_filter_operators
  uploaded_on: date_filter_operators
  uploaded_on_func: datetime_function_filter_operators
  _and: [directus_files_filter]
  _or: [directus_files_filter]
}

type directus_files_mutated {
  key: ID!
  event: EventEnum
  data: directus_files
}

type directus_flows {
  id: ID!
  name: String!
  icon: String
  color: String
  description: String
  status: String
  trigger: String
  accountability: String
  options: JSON
  options_func: count_functions
  operation(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  operations(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_operations]
  operations_func: count_functions
}

input directus_flows_filter {
  id: id_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  description: string_filter_operators
  status: string_filter_operators
  trigger: string_filter_operators
  accountability: string_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  operation: directus_operations_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  operations: directus_operations_quantifier_filter
  operations_func: count_function_filter_operators
  _and: [directus_flows_filter]
  _or: [directus_flows_filter]
}

type directus_flows_mutated {
  key: ID!
  event: EventEnum
  data: directus_flows
}

type directus_folders {
  id: ID!
  name: String!
  parent(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
}

input directus_folders_filter {
  id: id_filter_operators
  name: string_filter_operators
  parent: directus_folders_filter
  _and: [directus_folders_filter]
  _or: [directus_folders_filter]
}

type directus_folders_mutated {
  key: ID!
  event: EventEnum
  data: directus_folders
}

type directus_notifications {
  id: ID!
  timestamp: Date
  timestamp_func: datetime_functions
  status: String
  recipient(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  sender(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  subject: String!
  message: String
  collection: String
  item: String
}

type directus_notifications_mutated {
  key: ID!
  event: EventEnum
  data: directus_notifications
}

type directus_operations {
  id: ID!
  name: String
  key: String!
  type: String!
  position_x: Int!
  position_y: Int!
  options: JSON
  options_func: count_functions
  resolve(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  reject(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

input directus_operations_filter {
  id: id_filter_operators
  name: string_filter_operators
  key: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  resolve: directus_operations_filter
  reject: directus_operations_filter
  flow: directus_flows_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_operations_filter]
  _or: [directus_operations_filter]
}

type directus_operations_mutated {
  key: ID!
  event: EventEnum
  data: directus_operations
}

input directus_operations_quantifier_filter {
  id: id_filter_operators
  name: string_filter_operators
  key: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  resolve: directus_operations_filter
  reject: directus_operations_filter
  flow: directus_flows_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_operations_filter]
  _or: [directus_operations_filter]
  _some: directus_operations_filter
  _none: directus_operations_filter
}

type directus_panels {
  id: ID!
  dashboard(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_dashboards
  name: String
  icon: String
  color: String
  show_header: Boolean!
  note: String
  type: String!
  position_x: Int!
  position_y: Int!
  width: Int!
  height: Int!
  options: JSON
  options_func: count_functions
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

input directus_panels_filter {
  id: id_filter_operators
  dashboard: directus_dashboards_filter
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  show_header: boolean_filter_operators
  note: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_panels_filter]
  _or: [directus_panels_filter]
}

type directus_panels_mutated {
  key: ID!
  event: EventEnum
  data: directus_panels
}

input directus_panels_quantifier_filter {
  id: id_filter_operators
  dashboard: directus_dashboards_filter
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  show_header: boolean_filter_operators
  note: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_panels_filter]
  _or: [directus_panels_filter]
  _some: directus_panels_filter
  _none: directus_panels_filter
}

type directus_permissions {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  permissions_func: count_functions
  validation: JSON
  validation_func: count_functions
  presets: JSON
  presets_func: count_functions
  fields: [String]
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
}

input directus_permissions_filter {
  id: number_filter_operators
  collection: string_filter_operators
  action: string_filter_operators
  permissions: string_filter_operators
  permissions_func: count_function_filter_operators
  validation: string_filter_operators
  validation_func: count_function_filter_operators
  presets: string_filter_operators
  presets_func: count_function_filter_operators
  fields: string_filter_operators
  policy: directus_policies_filter
  _and: [directus_permissions_filter]
  _or: [directus_permissions_filter]
}

type directus_permissions_mutated {
  key: ID!
  event: EventEnum
  data: directus_permissions
}

input directus_permissions_quantifier_filter {
  id: number_filter_operators
  collection: string_filter_operators
  action: string_filter_operators
  permissions: string_filter_operators
  permissions_func: count_function_filter_operators
  validation: string_filter_operators
  validation_func: count_function_filter_operators
  presets: string_filter_operators
  presets_func: count_function_filter_operators
  fields: string_filter_operators
  policy: directus_policies_filter
  _and: [directus_permissions_filter]
  _or: [directus_permissions_filter]
  _some: directus_permissions_filter
  _none: directus_permissions_filter
}

type directus_policies {
  id: ID!
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions(filter: directus_permissions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_permissions]
  permissions_func: count_functions
  users(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  users_func: count_functions
  roles(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  roles_func: count_functions
}

input directus_policies_filter {
  id: id_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  ip_access: string_filter_operators
  enforce_tfa: boolean_filter_operators
  admin_access: boolean_filter_operators
  app_access: boolean_filter_operators
  permissions: directus_permissions_quantifier_filter
  permissions_func: count_function_filter_operators
  users: directus_access_quantifier_filter
  users_func: count_function_filter_operators
  roles: directus_access_quantifier_filter
  roles_func: count_function_filter_operators
  _and: [directus_policies_filter]
  _or: [directus_policies_filter]
}

type directus_policies_mutated {
  key: ID!
  event: EventEnum
  data: directus_policies
}

type directus_presets {
  id: ID!
  bookmark: String
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  collection: String
  search: String
  layout: String
  layout_query: JSON
  layout_query_func: count_functions
  layout_options: JSON
  layout_options_func: count_functions
  refresh_interval: Int
  filter: JSON
  filter_func: count_functions
  icon: String
  color: String
}

type directus_presets_mutated {
  key: ID!
  event: EventEnum
  data: directus_presets
}

type directus_revisions {
  id: ID!
  activity(filter: directus_activity_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_activity
  collection: String!
  item: String!
  data: JSON
  data_func: count_functions
  delta: JSON
  delta_func: count_functions
  parent(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_revisions
  version(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_versions
}

input directus_revisions_filter {
  id: number_filter_operators
  activity: directus_activity_filter
  collection: string_filter_operators
  item: string_filter_operators
  data: string_filter_operators
  data_func: count_function_filter_operators
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  parent: directus_revisions_filter
  version: directus_versions_filter
  _and: [directus_revisions_filter]
  _or: [directus_revisions_filter]
}

type directus_revisions_mutated {
  key: ID!
  event: EventEnum
  data: directus_revisions
}

input directus_revisions_quantifier_filter {
  id: number_filter_operators
  activity: directus_activity_filter
  collection: string_filter_operators
  item: string_filter_operators
  data: string_filter_operators
  data_func: count_function_filter_operators
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  parent: directus_revisions_filter
  version: directus_versions_filter
  _and: [directus_revisions_filter]
  _or: [directus_revisions_filter]
  _some: directus_revisions_filter
  _none: directus_revisions_filter
}

type directus_roles {
  id: ID!
  name: String!
  icon: String
  description: String
  parent(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  children(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_roles]
  children_func: count_functions
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
  users(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_users]
  users_func: count_functions
}

input directus_roles_filter {
  id: id_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  parent: directus_roles_filter
  children: directus_roles_quantifier_filter
  children_func: count_function_filter_operators
  policies: directus_access_quantifier_filter
  policies_func: count_function_filter_operators
  users: directus_users_quantifier_filter
  users_func: count_function_filter_operators
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
}

type directus_roles_mutated {
  key: ID!
  event: EventEnum
  data: directus_roles
}

input directus_roles_quantifier_filter {
  id: id_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  parent: directus_roles_filter
  children: directus_roles_quantifier_filter
  children_func: count_function_filter_operators
  policies: directus_access_quantifier_filter
  policies_func: count_function_filter_operators
  users: directus_users_quantifier_filter
  users_func: count_function_filter_operators
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
  _some: directus_roles_filter
  _none: directus_roles_filter
}

type directus_settings {
  id: ID!
  project_name: String
  project_url: String

  """$t:field_options.directus_settings.project_color_note"""
  project_color: String
  project_logo(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_foreground(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_background(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_note: String
  auth_login_attempts: Int
  auth_password_policy: String
  storage_asset_transform: String
  storage_asset_presets: JSON
  storage_asset_presets_func: count_functions
  custom_css: String
  storage_default_folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  basemaps: JSON
  basemaps_func: count_functions
  mapbox_key: String
  module_bar: JSON
  module_bar_func: count_functions
  project_descriptor: String
  default_language: String
  custom_aspect_ratios: JSON
  custom_aspect_ratios_func: count_functions
  public_favicon(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  default_appearance: String
  default_theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  default_theme_dark: String
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  report_error_url: String
  report_bug_url: String
  report_feature_url: String

  """$t:fields.directus_settings.public_registration_note"""
  public_registration: Boolean!

  """$t:fields.directus_settings.public_registration_verify_email_note"""
  public_registration_verify_email: Boolean
  public_registration_role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:fields.directus_settings.public_registration_email_filter_note"""
  public_registration_email_filter: JSON
  public_registration_email_filter_func: count_functions
  visual_editor_urls: JSON
  visual_editor_urls_func: count_functions
  accepted_terms: Boolean
  project_id: String
}

type directus_settings_mutated {
  key: ID!
  event: EventEnum
  data: directus_settings
}

type directus_shares {
  id: ID!
  name: String
  collection: String!
  item: String!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:shared_leave_blank_for_passwordless_access"""
  password: Hash
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_start: Date
  date_start_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_end: Date
  date_end_func: datetime_functions
  times_used: Int

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Int
}

type directus_shares_mutated {
  key: ID!
  event: EventEnum
  data: directus_shares
}

type directus_translations {
  id: ID!
  language: String!
  key: String!
  value: String!
}

type directus_translations_mutated {
  key: ID!
  event: EventEnum
  data: directus_translations
}

type directus_users {
  id: ID!
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  tags_func: count_functions
  avatar(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  language: String
  tfa_secret: Hash
  status: String
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  token: Hash
  last_access: Date
  last_access_func: datetime_functions
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  auth_data_func: count_functions
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  text_direction: String
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
}

input directus_users_filter {
  id: id_filter_operators
  first_name: string_filter_operators
  last_name: string_filter_operators
  email: string_filter_operators
  password: hash_filter_operators
  location: string_filter_operators
  title: string_filter_operators
  description: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  avatar: directus_files_filter
  language: string_filter_operators
  tfa_secret: hash_filter_operators
  status: string_filter_operators
  role: directus_roles_filter
  token: hash_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_page: string_filter_operators
  provider: string_filter_operators
  external_identifier: string_filter_operators
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  email_notifications: boolean_filter_operators
  appearance: string_filter_operators
  theme_dark: string_filter_operators
  theme_light: string_filter_operators
  theme_light_overrides: string_filter_operators
  theme_light_overrides_func: count_function_filter_operators
  theme_dark_overrides: string_filter_operators
  theme_dark_overrides_func: count_function_filter_operators
  text_direction: string_filter_operators
  policies: directus_access_quantifier_filter
  policies_func: count_function_filter_operators
  _and: [directus_users_filter]
  _or: [directus_users_filter]
}

type directus_users_mutated {
  key: ID!
  event: EventEnum
  data: directus_users
}

input directus_users_quantifier_filter {
  id: id_filter_operators
  first_name: string_filter_operators
  last_name: string_filter_operators
  email: string_filter_operators
  password: hash_filter_operators
  location: string_filter_operators
  title: string_filter_operators
  description: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  avatar: directus_files_filter
  language: string_filter_operators
  tfa_secret: hash_filter_operators
  status: string_filter_operators
  role: directus_roles_filter
  token: hash_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_page: string_filter_operators
  provider: string_filter_operators
  external_identifier: string_filter_operators
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  email_notifications: boolean_filter_operators
  appearance: string_filter_operators
  theme_dark: string_filter_operators
  theme_light: string_filter_operators
  theme_light_overrides: string_filter_operators
  theme_light_overrides_func: count_function_filter_operators
  theme_dark_overrides: string_filter_operators
  theme_dark_overrides_func: count_function_filter_operators
  text_direction: string_filter_operators
  policies: directus_access_quantifier_filter
  policies_func: count_function_filter_operators
  _and: [directus_users_filter]
  _or: [directus_users_filter]
  _some: directus_users_filter
  _none: directus_users_filter
}

type directus_versions {
  id: ID!
  key: String!
  name: String
  collection: String!
  item: String!
  hash: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  delta: JSON
  delta_func: count_functions
}

input directus_versions_filter {
  id: id_filter_operators
  key: string_filter_operators
  name: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  hash: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  _and: [directus_versions_filter]
  _or: [directus_versions_filter]
}

type directus_versions_mutated {
  key: ID!
  event: EventEnum
  data: directus_versions
}

type directus_webhooks {
  id: ID!
  name: String!
  method: String
  url: String!
  status: String
  data: Boolean
  actions: [String]!
  collections: [String]!
  headers: JSON
  headers_func: count_functions
  was_active_before_deprecation: Boolean!
  migrated_flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
}

type directus_webhooks_mutated {
  key: ID!
  event: EventEnum
  data: directus_webhooks
}

enum EventEnum {
  create
  update
  delete
}

"""BigInt value"""
scalar GraphQLBigInt

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""Hashed string values"""
scalar Hash

input hash_filter_operators {
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input id_filter_operators {
  _eq: ID
  _neq: ID
  _contains: ID
  _icontains: ID
  _ncontains: ID
  _starts_with: ID
  _nstarts_with: ID
  _istarts_with: ID
  _nistarts_with: ID
  _ends_with: ID
  _nends_with: ID
  _iends_with: ID
  _niends_with: ID
  _in: [ID]
  _nin: [ID]
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  create_boutiques_items(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_boutiques_input!]): [boutiques!]!
  create_boutiques_item(data: create_boutiques_input!): boutiques
  create_categories_items(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_categories_input!]): [categories!]!
  create_categories_item(data: create_categories_input!): categories
  create_customers_items(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_customers_input!]): [customers!]!
  create_customers_item(data: create_customers_input!): customers
  create_orders_items(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_orders_input!]): [orders!]!
  create_orders_item(data: create_orders_input!): orders
  create_products_items(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_products_input!]): [products!]!
  create_products_item(data: create_products_input!): products
  create_terminals_items(filter: terminals_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_terminals_input!]): [terminals!]!
  create_terminals_item(data: create_terminals_input!): terminals
  create_views_items(filter: views_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_views_input!]): [views!]!
  create_views_item(data: create_views_input!): views
  create_visits_items(filter: visits_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_visits_input!]): [visits!]!
  create_visits_item(data: create_visits_input!): visits
  update_boutiques_items(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_boutiques_input!): [boutiques!]!
  update_boutiques_batch(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_boutiques_input!]): [boutiques!]!
  update_boutiques_item(id: ID!, data: update_boutiques_input!): boutiques
  update_categories_items(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_categories_input!): [categories!]!
  update_categories_batch(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_categories_input!]): [categories!]!
  update_categories_item(id: ID!, data: update_categories_input!): categories
  update_customers_items(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_customers_input!): [customers!]!
  update_customers_batch(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_customers_input!]): [customers!]!
  update_customers_item(id: ID!, data: update_customers_input!): customers
  update_orders_items(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_orders_input!): [orders!]!
  update_orders_batch(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_orders_input!]): [orders!]!
  update_orders_item(id: ID!, data: update_orders_input!): orders
  update_products_items(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_products_input!): [products!]!
  update_products_batch(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_products_input!]): [products!]!
  update_products_item(id: ID!, data: update_products_input!): products
  update_terminals_items(filter: terminals_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_terminals_input!): [terminals!]!
  update_terminals_batch(filter: terminals_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_terminals_input!]): [terminals!]!
  update_terminals_item(id: ID!, data: update_terminals_input!): terminals
  update_views_items(filter: views_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_views_input!): [views!]!
  update_views_batch(filter: views_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_views_input!]): [views!]!
  update_views_item(id: ID!, data: update_views_input!): views
  update_visits_items(filter: visits_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_visits_input!): [visits!]!
  update_visits_batch(filter: visits_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_visits_input!]): [visits!]!
  update_visits_item(id: ID!, data: update_visits_input!): visits
  delete_boutiques_items(ids: [ID]!): delete_many
  delete_boutiques_item(id: ID!): delete_one
  delete_categories_items(ids: [ID]!): delete_many
  delete_categories_item(id: ID!): delete_one
  delete_customers_items(ids: [ID]!): delete_many
  delete_customers_item(id: ID!): delete_one
  delete_orders_items(ids: [ID]!): delete_many
  delete_orders_item(id: ID!): delete_one
  delete_products_items(ids: [ID]!): delete_many
  delete_products_item(id: ID!): delete_one
  delete_terminals_items(ids: [ID]!): delete_many
  delete_terminals_item(id: ID!): delete_one
  delete_views_items(ids: [ID]!): delete_many
  delete_views_item(id: ID!): delete_one
  delete_visits_items(ids: [ID]!): delete_many
  delete_visits_item(id: ID!): delete_one
}

input number_filter_operators {
  _eq: GraphQLStringOrFloat
  _neq: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _nin: [GraphQLStringOrFloat]
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

type orders {
  id: ID!
  total_price: Float
  status: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  product(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
  customer(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
  boutique(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): boutiques
}

type orders_aggregated {
  group: JSON
  countAll: Int
  count: orders_aggregated_count
  countDistinct: orders_aggregated_count
  avg: orders_aggregated_fields
  sum: orders_aggregated_fields
  avgDistinct: orders_aggregated_fields
  sumDistinct: orders_aggregated_fields
  min: orders_aggregated_fields
  max: orders_aggregated_fields
}

type orders_aggregated_count {
  id: Int
  total_price: Int
  status: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  product: Int
  customer: Int
  boutique: Int
}

type orders_aggregated_fields {
  id: Float
  total_price: Float
  product: Float
  customer: Float
  boutique: Float
}

input orders_filter {
  id: number_filter_operators
  total_price: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  product: products_filter
  customer: customers_filter
  boutique: boutiques_filter
  _and: [orders_filter]
  _or: [orders_filter]
}

type orders_mutated {
  key: ID!
  event: EventEnum
  data: orders
}

type products {
  id: ID!
  name: String!
  subtitle: String
  description: String
  price: Float!
  market_price: Float
  stock: Int
  barcode: String
  brand: String
  category_id(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): categories
  seller_id: Int
  main_image: String
  images: JSON
  images_func: count_functions
  video_url: String
  is_on_sale: Boolean
  status: String
  total_sales_volume: Int
  rating_avg: Float
  total_reviews: Int
  created_at: Date
  created_at_func: datetime_functions
  updated_at: Date
  updated_at_func: datetime_functions
  boutique_id(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): boutiques
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  carousel: String
  boutique(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): boutiques
}

type products_aggregated {
  group: JSON
  countAll: Int
  count: products_aggregated_count
  countDistinct: products_aggregated_count
  avg: products_aggregated_fields
  sum: products_aggregated_fields
  avgDistinct: products_aggregated_fields
  sumDistinct: products_aggregated_fields
  min: products_aggregated_fields
  max: products_aggregated_fields
}

type products_aggregated_count {
  id: Int
  name: Int
  subtitle: Int
  description: Int
  price: Int
  market_price: Int
  stock: Int
  barcode: Int
  brand: Int
  category_id: Int
  seller_id: Int
  main_image: Int
  images: Int
  video_url: Int
  is_on_sale: Int
  status: Int
  total_sales_volume: Int
  rating_avg: Int
  total_reviews: Int
  created_at: Int
  updated_at: Int
  boutique_id: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  carousel: Int
}

type products_aggregated_fields {
  id: Float
  price: Float
  market_price: Float
  stock: Float
  category_id: Float
  seller_id: Float
  total_sales_volume: Float
  rating_avg: Float
  total_reviews: Float
  boutique_id: Float
}

input products_filter {
  id: number_filter_operators
  name: string_filter_operators
  subtitle: string_filter_operators
  description: string_filter_operators
  price: number_filter_operators
  market_price: number_filter_operators
  stock: number_filter_operators
  barcode: string_filter_operators
  brand: string_filter_operators
  category_id: categories_filter
  seller_id: number_filter_operators
  main_image: string_filter_operators
  images: string_filter_operators
  images_func: count_function_filter_operators
  video_url: string_filter_operators
  is_on_sale: boolean_filter_operators
  status: string_filter_operators
  total_sales_volume: number_filter_operators
  rating_avg: number_filter_operators
  total_reviews: number_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  updated_at: date_filter_operators
  updated_at_func: datetime_function_filter_operators
  boutique_id: boutiques_filter
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  carousel: string_filter_operators
  _and: [products_filter]
  _or: [products_filter]
  boutique: boutiques_filter
}

type products_mutated {
  key: ID!
  event: EventEnum
  data: products
}

type Query {
  boutiques(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [boutiques!]!
  boutiques_by_id(id: ID!, version: String): boutiques
  boutiques_aggregated(groupBy: [String], filter: boutiques_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [boutiques_aggregated!]!
  boutiques_by_version(version: String!, id: ID!): version_boutiques
  categories(filter: categories_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [categories!]!
  categories_by_id(id: ID!, version: String): categories
  categories_aggregated(groupBy: [String], filter: categories_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [categories_aggregated!]!
  categories_by_version(version: String!, id: ID!): version_categories
  customers(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [customers!]!
  customers_by_id(id: ID!, version: String): customers
  customers_aggregated(groupBy: [String], filter: customers_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [customers_aggregated!]!
  customers_by_version(version: String!, id: ID!): version_customers
  orders(filter: orders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [orders!]!
  orders_by_id(id: ID!, version: String): orders
  orders_aggregated(groupBy: [String], filter: orders_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [orders_aggregated!]!
  orders_by_version(version: String!, id: ID!): version_orders
  products(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [products!]!
  products_by_id(id: ID!, version: String): products
  products_aggregated(groupBy: [String], filter: products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [products_aggregated!]!
  products_by_version(version: String!, id: ID!): version_products
  terminals(filter: terminals_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [terminals!]!
  terminals_by_id(id: ID!, version: String): terminals
  terminals_aggregated(groupBy: [String], filter: terminals_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [terminals_aggregated!]!
  terminals_by_version(version: String!, id: ID!): version_terminals
  views(filter: views_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [views!]!
  views_by_id(id: ID!, version: String): views
  views_aggregated(groupBy: [String], filter: views_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [views_aggregated!]!
  views_by_version(version: String!, id: ID!): version_views
  visits(filter: visits_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [visits!]!
  visits_by_id(id: ID!, version: String): visits
  visits_aggregated(groupBy: [String], filter: visits_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [visits_aggregated!]!
  visits_by_version(version: String!, id: ID!): version_visits
}

input string_filter_operators {
  _eq: String
  _neq: String
  _contains: String
  _icontains: String
  _ncontains: String
  _starts_with: String
  _nstarts_with: String
  _istarts_with: String
  _nistarts_with: String
  _ends_with: String
  _nends_with: String
  _iends_with: String
  _niends_with: String
  _in: [String]
  _nin: [String]
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

type Subscription {
  boutiques_mutated(event: EventEnum): boutiques_mutated
  categories_mutated(event: EventEnum): categories_mutated
  customers_mutated(event: EventEnum): customers_mutated
  directus_access_mutated(event: EventEnum): directus_access_mutated
  directus_activity_mutated(event: EventEnum): directus_activity_mutated
  directus_comments_mutated(event: EventEnum): directus_comments_mutated
  directus_dashboards_mutated(event: EventEnum): directus_dashboards_mutated
  directus_files_mutated(event: EventEnum): directus_files_mutated
  directus_flows_mutated(event: EventEnum): directus_flows_mutated
  directus_folders_mutated(event: EventEnum): directus_folders_mutated
  directus_notifications_mutated(event: EventEnum): directus_notifications_mutated
  directus_operations_mutated(event: EventEnum): directus_operations_mutated
  directus_panels_mutated(event: EventEnum): directus_panels_mutated
  directus_permissions_mutated(event: EventEnum): directus_permissions_mutated
  directus_policies_mutated(event: EventEnum): directus_policies_mutated
  directus_presets_mutated(event: EventEnum): directus_presets_mutated
  directus_revisions_mutated(event: EventEnum): directus_revisions_mutated
  directus_roles_mutated(event: EventEnum): directus_roles_mutated
  directus_settings_mutated(event: EventEnum): directus_settings_mutated
  directus_shares_mutated(event: EventEnum): directus_shares_mutated
  directus_translations_mutated(event: EventEnum): directus_translations_mutated
  directus_users_mutated(event: EventEnum): directus_users_mutated
  directus_versions_mutated(event: EventEnum): directus_versions_mutated
  directus_webhooks_mutated(event: EventEnum): directus_webhooks_mutated
  orders_mutated(event: EventEnum): orders_mutated
  products_mutated(event: EventEnum): products_mutated
  terminals_mutated(event: EventEnum): terminals_mutated
  views_mutated(event: EventEnum): views_mutated
  visits_mutated(event: EventEnum): visits_mutated
}

type terminals {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  android_id: String
  brand: String
  manufacturer: String
  model_name: String
  os_name: String
  os_version: String
  device_name: String
  device_type: String
  total_memory: String
  supported_cpu_architectures: String
  authorized_boutique(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): boutiques
}

type terminals_aggregated {
  group: JSON
  countAll: Int
  count: terminals_aggregated_count
  countDistinct: terminals_aggregated_count
  avg: terminals_aggregated_fields
  sum: terminals_aggregated_fields
  avgDistinct: terminals_aggregated_fields
  sumDistinct: terminals_aggregated_fields
  min: terminals_aggregated_fields
  max: terminals_aggregated_fields
}

type terminals_aggregated_count {
  id: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  android_id: Int
  brand: Int
  manufacturer: Int
  model_name: Int
  os_name: Int
  os_version: Int
  device_name: Int
  device_type: Int
  total_memory: Int
  supported_cpu_architectures: Int
  authorized_boutique: Int
}

type terminals_aggregated_fields {
  id: Float
  authorized_boutique: Float
}

input terminals_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  android_id: string_filter_operators
  brand: string_filter_operators
  manufacturer: string_filter_operators
  model_name: string_filter_operators
  os_name: string_filter_operators
  os_version: string_filter_operators
  device_name: string_filter_operators
  device_type: string_filter_operators
  total_memory: string_filter_operators
  supported_cpu_architectures: string_filter_operators
  authorized_boutique: boutiques_filter
  _and: [terminals_filter]
  _or: [terminals_filter]
}

type terminals_mutated {
  key: ID!
  event: EventEnum
  data: terminals
}

input update_boutiques_input {
  id: ID
  name: String
  status: String
  images: JSON
  main_image: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  stars: Int
  address: String
  city: String
  code: String
  category: String
  contact: String
  expire_date: Date
}

input update_categories_input {
  id: ID
  name: String
  description: String
  boutique_id: update_boutiques_input
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  boutique: update_boutiques_input
}

input update_customers_input {
  id: ID
  open_id: String
  status: String
  sort: Int
  avatar: String
  type: String
  sex: Int
  nick_name: String
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  boutique: update_boutiques_input
}

input update_directus_access_input {
  id: ID
  role: update_directus_roles_input
  user: update_directus_users_input
  policy: update_directus_policies_input
  sort: Int
}

input update_directus_files_input {
  id: ID
  storage: String
  filename_disk: String
  filename_download: String
  title: String
  type: String
  folder: update_directus_folders_input
  uploaded_by: update_directus_users_input
  created_on: Date
  modified_by: update_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date
}

input update_directus_folders_input {
  id: ID
  name: String
  parent: update_directus_folders_input
}

input update_directus_permissions_input {
  id: ID
  collection: String
  action: String
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: update_directus_policies_input
}

input update_directus_policies_input {
  id: ID
  name: String
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean
  admin_access: Boolean
  app_access: Boolean
  permissions: [update_directus_permissions_input]
  users: [update_directus_access_input]
  roles: [update_directus_access_input]
}

input update_directus_roles_input {
  id: ID
  name: String
  icon: String
  description: String
  parent: update_directus_roles_input
  children: [update_directus_roles_input]
  policies: [update_directus_access_input]
  users: [update_directus_users_input]
}

input update_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: update_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: update_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  text_direction: String
  policies: [update_directus_access_input]
}

input update_orders_input {
  id: ID
  total_price: Float
  status: String
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  product: update_products_input
  customer: update_customers_input
  boutique: update_boutiques_input
}

input update_products_input {
  id: ID
  name: String
  subtitle: String
  description: String
  price: Float
  market_price: Float
  stock: Int
  barcode: String
  brand: String
  category_id: update_categories_input
  seller_id: Int
  main_image: String
  images: JSON
  video_url: String
  is_on_sale: Boolean
  status: String
  total_sales_volume: Int
  rating_avg: Float
  total_reviews: Int
  created_at: Date
  updated_at: Date
  boutique_id: update_boutiques_input
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  carousel: String
  boutique: update_boutiques_input
}

input update_terminals_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  android_id: String
  brand: String
  manufacturer: String
  model_name: String
  os_name: String
  os_version: String
  device_name: String
  device_type: String
  total_memory: String
  supported_cpu_architectures: String
  authorized_boutique: update_boutiques_input
}

input update_views_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  customer: update_customers_input
  product: update_products_input
  boutique: update_boutiques_input
}

input update_visits_input {
  id: ID
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  customer: update_customers_input
  boutique: update_boutiques_input
}

type version_boutiques {
  id: ID
  name: String
  status: String
  images: JSON
  main_image: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  stars: Int
  address: String
  city: String
  code: String
  category: String
  contact: String
  expire_date: Date
}

type version_categories {
  id: ID
  name: String
  description: String
  boutique_id: JSON
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  boutique: JSON
}

type version_customers {
  id: ID
  open_id: String
  status: String
  sort: Int
  avatar: String
  type: String
  sex: Int
  nick_name: String
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  boutique: JSON
}

type version_orders {
  id: ID
  total_price: Float
  status: String
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  product: JSON
  customer: JSON
  boutique: JSON
}

type version_products {
  id: ID
  name: String
  subtitle: String
  description: String
  price: Float
  market_price: Float
  stock: Int
  barcode: String
  brand: String
  category_id: JSON
  seller_id: Int
  main_image: String
  images: JSON
  video_url: String
  is_on_sale: Boolean
  status: String
  total_sales_volume: Int
  rating_avg: Float
  total_reviews: Int
  created_at: Date
  updated_at: Date
  boutique_id: JSON
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  carousel: String
  boutique: JSON
}

type version_terminals {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  android_id: String
  brand: String
  manufacturer: String
  model_name: String
  os_name: String
  os_version: String
  device_name: String
  device_type: String
  total_memory: String
  supported_cpu_architectures: String
  authorized_boutique: JSON
}

type version_views {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  customer: JSON
  product: JSON
  boutique: JSON
}

type version_visits {
  id: ID
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  customer: JSON
  boutique: JSON
}

type views {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  customer(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
  product(filter: products_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): products
  boutique(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): boutiques
}

type views_aggregated {
  group: JSON
  countAll: Int
  count: views_aggregated_count
  countDistinct: views_aggregated_count
  avg: views_aggregated_fields
  sum: views_aggregated_fields
  avgDistinct: views_aggregated_fields
  sumDistinct: views_aggregated_fields
  min: views_aggregated_fields
  max: views_aggregated_fields
}

type views_aggregated_count {
  id: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  customer: Int
  product: Int
  boutique: Int
}

type views_aggregated_fields {
  id: Float
  customer: Float
  product: Float
  boutique: Float
}

input views_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  customer: customers_filter
  product: products_filter
  boutique: boutiques_filter
  _and: [views_filter]
  _or: [views_filter]
}

type views_mutated {
  key: ID!
  event: EventEnum
  data: views
}

type visits {
  id: ID!
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  customer(filter: customers_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): customers
  boutique(filter: boutiques_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): boutiques
}

type visits_aggregated {
  group: JSON
  countAll: Int
  count: visits_aggregated_count
  countDistinct: visits_aggregated_count
  avg: visits_aggregated_fields
  sum: visits_aggregated_fields
  avgDistinct: visits_aggregated_fields
  sumDistinct: visits_aggregated_fields
  min: visits_aggregated_fields
  max: visits_aggregated_fields
}

type visits_aggregated_count {
  id: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  customer: Int
  boutique: Int
}

type visits_aggregated_fields {
  id: Float
  customer: Float
  boutique: Float
}

input visits_filter {
  id: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  customer: customers_filter
  boutique: boutiques_filter
  _and: [visits_filter]
  _or: [visits_filter]
}

type visits_mutated {
  key: ID!
  event: EventEnum
  data: visits
}

